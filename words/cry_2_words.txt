applied
crypto
public
key
crypto
review
symmetric
crypto
encryption
authentication
today
we
begin
public
key
crypto
some
light
review
alice
and
bob
want
to
communicate
their
efforts
are
often
thwarted
by
an
or
a
malicious
sharing
a
with
symmetric
we
assume
that
alice
and
bob
have
a
secret
key
nobody
else
has
access
the
big
question
how
did
they
share
that
sharing
a
that
how
do
two
who
have
never
met
share
an
aes
key
so
they
can
communicate
securely
across
the
by
by
text
carrier
smoke
sharing
a
key
for
a
long
most
people
thought
this
was
an
impossible
public
key
crypto
in
this
we
will
discuss
key
symmetric
crypto
describes
techniques
where
two
users
share
a
common
public
key
crypto
describes
techniques
where
one
key
is
publicly
and
a
second
key
is
kept
secret
by
one
comparisons
with
symmetric
a
single
key
does
both
encryption
and
in
public
key
one
key
does
and
one
key
does
comparisons
symmetric
crypto
techniques
stream
use
simple
bit
operations
public
key
crypto
techniques
typically
use
complex
mathematical
comparisons
symmetric
crypto
techniques
are
usually
very
public
key
crypto
techniques
are
slower
by
comparison
or
times
comparisons
symmetric
crypto
techniques
require
a
public
key
crypto
techniques
do
not
require
a
no
like
we
people
thought
this
was
an
impossible
clifford
an
english
mathematician
working
for
the
uk
intelligence
agency
gchq
communications
developed
a
public
key
but
it
was
never
in
it
declassified
until
ron
adi
and
leonard
adleman
publicly
announce
a
public
key
and
they
call
it
rsa
their
in
their
discovery
was
equivalent
to
but
nobody
knew
that
for
another
rsa
we
are
going
to
spend
a
lot
of
time
devoted
to
discussing
rsa
but
to
even
get
we
have
to
discuss
some
foundational
mathematical
math
concepts
integers
prime
numbers
factorization
of
integers
into
primes
semiprimes
modular
arithmetic
addition
multiplication
exponentiation
integers
everyone
know
what
an
integer
an
integer
is
a
whole
or
are
the
following
integers
or
π
prime
numbers
how
about
prime
a
prime
number
is
an
integer
which
is
divisible
by
only
itself
and
are
the
following
factorization
we
care
frequently
about
the
factorization
of
an
integer
into
its
prime
components
x
x
x
x
x
factorization
how
hard
is
how
hard
is
it
to
factorize
how
about
how
about
could
a
computer
do
factorization
computers
factored
a
number
decimal
over
the
span
of
two
the
number
was
of
the
form
p
x
where
p
and
q
are
numbers
of
this
form
two
distinct
prime
are
called
factorization
go
check
out
rsa
numbers
are
large
semiprimes
that
are
part
of
the
rsa
factoring
challenge
get
rewards
for
computing
the
factorizations
of
these
the
challenge
has
ended
as
of
though
many
of
the
numbers
remain
rsa
numbers
these
numbers
are
called
rsa
numbers
because
large
semiprimes
are
important
in
the
rsa
the
factoring
challenge
is
important
because
the
security
of
rsa
is
connected
with
the
difficulty
of
factoring
large
rsa
numbers
the
largest
rsa
number
that
has
been
factored
is
we
are
fairly
confident
that
computers
have
significant
difficulty
factoring
numbers
much
bigger
than
in
we
will
use
rsa
numbers
with
or
even
modular
arithmetic
we
will
come
back
to
semiprimes
and
but
the
next
topic
we
need
to
cover
is
modular
modular
arithmetic
you
are
all
familiar
with
traditional
notions
of
and
so
modular
arithmetic
but
what
if
i
gave
you
the
following
how
would
you
make
sense
of
modular
arithmetic
it
can
be
useful
to
think
about
arithmetic
happening
on
a
clock
with
modular
arithmetic
we
call
this
modular
and
usually
notate
it
like
modular
arithmetic
it
have
to
be
a
modular
arithmetic
more
examples
we
done
any
exponentiation
until
everyone
ok
with
modular
exponentiation
in
there
are
a
few
ways
to
compute
mod
summary
keep
in
mind
the
following
concepts
for
next
primes
factorization
semiprimes
modular
arithmetic
especially
exponentiation
applied
crypto
public
key
crypto
review
prime
numbers
factorization
and
the
computational
difficulty
thereof
semiprimes
modular
arithmetic
today
more
on
public
key
crypto
the
rsa
cryptosystem
encryption
decryption
primality
testing
this
is
different
from
factoring
public
key
crypto
i
want
two
keys
a
public
key
this
can
be
sent
in
the
clear
anyone
can
know
my
public
key
a
private
key
this
should
be
kept
for
only
me
one
will
be
used
for
encryption
and
one
for
which
is
public
key
crypto
the
public
key
should
be
used
for
the
private
key
should
be
used
for
only
the
holder
of
the
private
key
should
be
able
to
decrypt
messages
intended
for
the
rsa
cryptosystem
the
building
blocks
of
rsa
primes
p
and
q
a
semiprime
n
the
the
number
ϕ
you
know
why
this
number
is
important
yet
a
e
a
d
the
numbers
e
and
d
have
the
the
rsa
cryptosystem
p
q
n
n
p
ϕ
ϕ
e
get
to
choose
d
that
mod
the
rsa
cryptosystem
alice
generates
all
these
then
sends
n
and
e
to
n
e
p
q
n
e
d
the
rsa
cryptosystem
encryption
take
a
message
like
m
compute
the
ciphertext
e
c
m
mod
n
c
mod
c
the
rsa
cryptosystem
bob
comes
up
with
a
encrypts
it
and
sends
the
ciphertext
to
m
c
p
n
q
e
n
e
d
the
rsa
cryptosystem
decryption
take
the
ciphertext
c
recover
the
plaintext
d
m
c
mod
n
m
mod
m
the
rsa
cryptosystem
alice
decrypts
to
find
the
original
c
m
p
n
q
e
n
e
d
the
rsa
cryptosystem
this
whole
thing
is
the
private
p
n
q
e
n
e
d
the
rsa
cryptosystem
this
whole
thing
is
the
public
p
n
q
e
n
e
d
the
rsa
cryptosystem
this
number
is
the
public
p
n
q
e
n
e
this
number
is
the
d
private
by
the
are
we
saying
that
your
message
must
be
a
and
on
top
of
that
number
must
be
less
than
all
bitstrings
of
bit
size
less
than
that
of
n
can
be
expressed
as
a
number
by
the
and
any
number
less
than
n
can
be
encrypted
using
rsa
with
n
as
the
rsa
can
encrypt
messages
up
to
but
you
have
to
interpret
the
message
as
an
primality
tests
generating
an
rsa
private
key
involves
finding
some
big
what
i
do
is
take
some
big
numbers
and
try
to
factor
hoping
to
coincidentally
find
a
primality
tests
it
turns
out
that
testing
for
primality
is
much
easier
than
primality
tests
there
are
two
main
primality
tests
that
we
use
fermat
test
test
these
tests
take
a
number
that
we
wish
to
and
output
a
yes
or
a
primality
tests
while
these
tests
are
they
are
not
that
these
tests
are
yes
probably
prime
no
probably
not
prime
primality
tests
while
these
tests
are
they
are
not
that
these
tests
are
yes
probably
prime
no
probably
not
prime
generating
a
private
key
for
alice
to
generate
a
private
she
starts
by
picking
a
large
number
it
a
generating
a
private
key
test
to
see
if
a
is
if
add
and
repeat
test
again
if
we
have
found
p
not
prime
not
prime
not
prime
not
prime
not
prime
p
not
prime
generating
a
private
key
repeat
process
to
find
another
and
call
it
alice
starts
with
a
large
number
b
not
prime
not
prime
not
prime
q
not
prime
generating
a
private
key
use
p
and
q
to
generate
n
and
n
p
q
ϕ
generating
a
private
key
pick
e
n
e
generating
a
private
key
compute
the
value
d
n
that
satisfies
e
d
mod
ϕ
still
know
why
this
is
d
generating
a
private
key
private
key
is
we
often
refer
to
it
as
a
priv
for
a
priv
generating
the
public
key
given
the
private
it
is
easy
to
make
the
corresponding
public
key
called
a
pub
a
a
priv
pub
public
keys
are
public
alice
can
send
her
public
key
to
anyone
in
the
because
attackers
cannot
rebuild
the
private
key
from
just
the
public
if
someone
could
factor
the
modulus
then
they
could
break
private
end
next
applied
crypto
public
key
crypto
review
rsa
private
key
public
key
encryption
decryption
today
ssl
attacks
signatures
certificates
certificate
authorities
attempt
ssl
stands
for
secure
sockets
layer
we
are
trying
to
develop
a
protocol
for
secure
communication
between
two
parties
that
have
not
exchanged
a
attempt
step
alice
generates
an
rsa
private
key
and
the
corresponding
public
key
a
priv
a
pub
attempt
step
alice
sends
bob
her
public
key
a
a
priv
pub
a
pub
attempt
step
bob
makes
a
message
to
send
to
alice
and
encrypts
it
with
her
public
his
message
is
a
a
priv
pub
msg
a
pub
attempt
alice
used
meaning
her
public
key
can
only
encrypt
up
to
bits
terribly
a
a
priv
pub
msg
a
pub
a
vague
memory
actually
run
into
this
problem
the
block
can
only
encrypt
we
had
to
invent
modes
of
operation
to
encrypt
more
than
should
we
make
modes
of
operation
for
we
and
it
would
totally
except
we
already
have
and
aes
is
a
hundred
or
a
thousand
times
faster
than
that
was
one
of
the
chief
advantages
of
symmetric
encryption
compared
to
public
key
but
we
need
a
key
for
aes
to
what
should
we
correct
we
should
use
rsa
just
for
the
purpose
of
sharing
an
aes
an
aes
key
is
or
sufficiently
small
enough
to
encrypt
with
an
rsa
public
key
without
using
any
modes
of
attempt
step
alice
generates
an
rsa
private
key
and
the
corresponding
public
key
she
sends
the
public
key
to
bob
a
a
priv
pub
a
pub
attempt
step
bob
generates
an
aes
k
he
encrypts
k
with
public
key
he
sends
a
to
alice
pub
a
pub
a
a
priv
pub
k
a
pub
attempt
step
alice
decrypts
transmission
using
her
private
this
reveals
a
pub
a
priv
k
a
pub
k
attempt
step
alice
and
bob
have
a
shared
key
they
can
now
send
messages
back
and
forth
to
each
other
encrypted
with
a
pub
a
priv
k
a
pub
k
wait
there
actually
is
a
the
problem
there
is
an
effective
the
problem
can
you
see
how
the
attack
the
problem
alice
generates
a
key
but
so
does
a
e
priv
priv
a
e
pub
pub
the
problem
alice
thinks
talking
to
bob
when
she
sends
her
public
eve
pretends
to
be
alice
and
sends
bob
her
own
public
a
a
e
e
priv
pub
priv
pub
a
e
pub
pub
the
problem
as
bob
makes
an
aes
key
and
then
he
encrypts
it
was
public
key
and
sends
that
to
a
e
e
e
priv
priv
pub
pub
k
a
e
pub
pub
the
problem
eve
can
decrypt
with
her
private
key
to
find
then
she
can
k
even
make
a
new
aes
to
send
to
a
a
e
e
priv
pub
priv
pub
k
a
e
pub
pub
k
the
problem
eve
has
inserted
herself
in
between
alice
and
bob
thought
they
had
a
secure
the
poor
a
e
e
priv
priv
pub
k
a
e
pub
pub
k
k
authentication
so
the
problem
is
that
bob
had
no
way
of
knowing
that
he
actually
got
public
we
need
some
way
of
providing
again
without
a
shared
remember
we
can
use
macs
once
we
do
have
a
shared
public
key
authentication
as
it
turns
we
can
use
rsa
keys
to
do
the
generate
signatures
verify
signatures
again
the
question
which
is
public
key
authentication
the
private
key
should
be
used
for
signing
the
public
key
should
be
used
for
verifying
a
signature
signing
example
without
worrying
about
a
mitm
for
a
do
an
example
of
signing
and
verifying
a
we
will
also
ignore
encryption
so
we
can
focus
only
on
signing
example
to
make
this
example
use
some
actual
p
q
n
e
d
signing
example
step
alice
generates
an
rsa
private
key
and
the
corresponding
public
key
she
sends
the
public
key
to
bob
a
a
priv
pub
a
pub
signing
example
make
a
message
be
an
m
sign
it
with
the
private
e
sgn
m
mod
n
sgn
mod
sgn
signing
example
step
alice
sends
bob
her
message
a
a
priv
pub
m
sgn
a
pub
signing
example
to
verify
a
signature
take
the
signature
and
verify
with
the
public
e
verify
sgn
mod
n
verify
mod
verify
then
compare
the
verify
value
to
the
message
signing
example
step
bob
runs
the
signature
through
the
verification
and
checks
to
see
the
result
matches
the
m
sgn
a
a
priv
pub
m
a
pub
issues
this
causes
a
problem
the
same
sort
of
problem
seen
what
if
we
have
to
sign
very
long
it
would
be
annoying
to
sign
every
chunk
of
a
megabyte
signatures
would
be
as
big
as
the
files
solution
the
solution
is
that
alice
should
hash
her
message
and
then
sign
the
then
the
data
to
be
signed
is
and
the
signature
itself
is
signing
example
step
alice
generates
key
pair
and
shares
her
public
key
with
a
a
priv
pub
a
pub
signing
example
step
alice
generates
a
hashes
then
signs
the
she
sends
message
signature
to
a
a
m
priv
pub
a
pub
signing
example
step
bob
runs
the
signature
through
the
verification
then
checks
the
result
to
the
hash
of
the
a
a
m
priv
pub
a
pub
ssl
so
how
do
signatures
relate
to
how
do
we
fix
the
mitm
trusted
third
party
the
solution
is
alice
and
bob
both
trust
and
they
both
have
public
charlie
signs
public
key
with
his
own
private
creating
a
bob
trusts
the
certificate
because
he
trusts
eve
fake
a
attempt
step
charlie
generates
an
rsa
keypair
and
shares
the
public
key
with
alice
and
bob
in
a
way
that
be
easily
c
c
c
pub
priv
pub
c
pub
attempt
step
alice
generates
an
rsa
then
sends
her
public
key
to
she
signs
it
to
prove
she
owns
the
private
a
c
c
pub
priv
pub
a
sig
pub
c
pub
attempt
step
charlie
signs
public
key
to
produce
a
key
cert
a
c
c
pub
priv
pub
a
cert
c
pub
attempt
step
alice
sends
her
certificate
to
bob
a
c
a
pub
pub
cert
a
cert
attempt
step
bob
verifies
certificate
using
public
a
c
pub
pub
a
a
cert
cert
attempt
step
bob
generates
an
aes
key
then
encrypts
with
certificate
contains
a
public
and
sends
that
to
a
c
a
pub
pub
cert
a
a
cert
cert
k
attempt
step
alice
decrypts
to
find
and
now
alice
and
bob
can
communicate
securely
using
a
c
pub
pub
a
a
cert
cert
k
k
terminology
when
charlie
distributes
his
public
he
signs
his
own
public
key
makes
it
also
a
this
is
called
a
or
a
root
certificate
comes
in
your
favorite
browser
terminology
that
means
that
if
somebody
can
tamper
with
your
they
can
own
terminology
charlie
is
known
as
a
certificate
authority
request
to
charlie
is
a
certificate
signing
request
question
how
did
charlie
know
to
sign
public
how
did
he
know
eve
intercepting
the
connection
and
injecting
her
own
public
answer
it
depends
on
the
if
we
are
talking
about
webpage
alice
is
looking
to
get
a
certificate
for
her
charlie
can
request
alice
prove
ownership
of
the
how
does
alice
prove
she
owns
a
charlie
can
ask
her
to
put
the
number
somewhere
on
the
charlie
can
ask
her
to
respond
to
an
sent
to
what
about
is
there
any
way
for
eve
to
she
fake
being
alice
to
she
fake
being
charlie
to
bob
or
alice
she
can
tamper
with
their
she
fake
being
alice
to
bob
she
fake
what
about
why
do
alice
and
bob
trust
they
have
to
trust
the
whole
certificate
authority
business
model
is
based
on
maintaining
as
soon
as
a
ca
does
something
shady
they
trust
is
and
the
business
fails
applied
crypto
public
key
crypto
review
rsa
ssl
certificates
certificate
authorities
today
ssl
mitm
review
for
the
people
often
say
to
refer
to
both
ssl
and
the
reason
is
that
there
have
been
several
iterations
of
a
secure
communication
with
changes
in
implementation
and
cipher
tls
is
the
successor
to
but
the
underlying
theory
is
the
review
alice
and
bob
want
to
create
a
channel
for
secure
charlie
trusted
third
acts
as
a
certificate
take
a
look
at
all
the
ways
an
eavesdropper
could
try
to
compromise
the
ssl
review
step
charlie
generates
an
rsa
keypair
and
shares
the
public
key
with
alice
and
bob
in
a
way
that
be
easily
c
c
c
pub
priv
pub
c
pub
ssl
review
step
what
can
eve
that
unless
she
could
tamper
with
and
c
c
c
pub
priv
pub
c
pub
ssl
review
step
alice
generates
an
rsa
then
sends
her
public
key
to
she
signs
it
to
prove
she
owns
the
private
a
c
c
pub
priv
pub
a
sig
pub
c
pub
ssl
review
step
what
can
eve
she
pretend
to
be
charlie
because
alice
has
his
root
cert
a
c
c
pub
priv
pub
a
sig
pub
c
pub
ssl
review
step
charlie
signs
public
key
to
produce
a
key
cert
a
c
c
pub
priv
pub
a
cert
c
pub
ssl
review
step
what
can
eve
eve
prove
she
owns
so
charlie
give
her
a
a
c
c
pub
priv
pub
a
cert
c
pub
one
thing
to
look
out
for
eve
could
buy
the
domain
and
then
get
a
cert
for
but
if
she
tries
to
present
that
cert
to
bob
bob
asked
for
browser
will
throw
an
error
because
the
name
on
the
cert
match
the
name
he
ssl
review
step
alice
sends
her
certificate
to
bob
a
c
a
pub
pub
cert
a
cert
ssl
review
step
what
can
eve
eve
could
make
her
own
ca
and
sign
her
own
but
bob
recognize
a
c
a
pub
pub
cert
a
cert
ssl
review
step
bob
verifies
certificate
using
public
a
c
pub
pub
a
a
cert
cert
ssl
review
step
bob
generates
an
aes
key
then
encrypts
with
certificate
contains
a
public
and
sends
that
to
a
c
a
pub
pub
cert
a
a
cert
cert
k
ssl
review
step
alice
decrypts
to
find
and
now
alice
and
bob
can
communicate
securely
using
a
c
pub
pub
a
a
cert
cert
k
k
more
on
cas
root
certificates
come
in
your
but
root
cas
can
also
sign
for
what
are
called
intermediate
certificate
chains
alice
sends
to
bob
a
chain
of
containing
a
sequence
of
root
cert
signed
signed
a
by
i
by
root
cert
cert
cert
certificate
chains
as
long
as
bob
trusts
the
root
then
he
can
trust
the
whole
root
cert
signed
signed
a
by
i
by
root
cert
cert
cert
applied
crypto
public
key
crypto
review
rsa
ssl
certificates
certificate
authorities
today
ssh
diffie
hellman
ephemeral
keys
perfect
forward
secrecy
questions
when
talking
about
browsing
the
which
party
needs
to
be
client
or
when
talking
about
which
party
needs
to
be
client
or
answers
server
client
and
server
trust
the
server
uses
a
private
key
to
generate
a
signature
to
send
to
the
for
first
time
the
client
will
get
the
following
the
authenticity
of
host
be
ecdsa
key
fingerprint
is
are
you
sure
you
want
to
continue
connecting
trust
the
client
can
simply
verify
the
signature
with
the
public
key
they
have
on
the
client
can
authenticate
with
a
or
with
a
signature
as
signatures
provide
proof
of
a
possession
of
a
private
ssh
how
does
an
ssh
server
and
client
exchange
symmetric
they
do
it
by
encrypting
an
aes
key
with
an
rsa
public
key
familiar
key
exchange
ssh
uses
a
method
called
the
key
rsa
is
an
encryption
technique
that
can
be
used
as
a
key
dh
is
a
key
exchange
technique
in
it
can
be
used
to
build
an
encryption
key
exchange
dh
is
a
public
key
crypto
but
its
security
does
not
rely
on
the
difficulty
of
factoring
large
dh
key
basics
alice
bob
alice
and
bob
common
paint
a
common
value
secret
colors
secret
values
public
exchange
assume
that
separating
colors
is
computationally
difficult
enough
that
an
eavesdropper
would
not
be
able
to
do
secret
colors
shared
secret
dh
key
exchange
in
we
use
dh
key
exchange
example
alice
and
bob
need
a
common
take
g
and
p
p
is
the
modulus
g
is
the
base
g
p
dh
key
exchange
example
alice
needs
a
secret
a
bob
needs
a
secret
b
dh
key
exchange
example
alice
needs
a
secret
a
bob
needs
a
secret
b
a
b
g
p
dh
key
exchange
example
a
alice
computes
g
mod
p
this
b
bob
computes
g
mod
p
this
a
b
a
b
g
p
dh
key
exchange
example
alice
sends
a
to
bob
sends
b
to
a
a
b
a
b
b
g
p
dh
key
exchange
example
a
alice
computes
b
mod
p
this
b
bob
computes
a
mod
p
this
s
is
the
shared
a
b
a
b
s
s
dh
key
exchange
example
this
algorithm
makes
use
of
the
following
mathematical
a
b
b
a
dh
key
exchange
example
the
dh
key
exchange
is
dependent
on
the
hope
that
if
an
attacker
possesses
a
both
g
and
g
then
he
cannot
recover
the
original
exponent
this
is
known
as
the
discrete
log
and
it
is
considered
computationally
hard
for
large
perfect
forward
secrecy
the
way
we
have
described
ssl
so
far
the
way
it
actually
is
frequently
does
not
allow
for
perfect
forward
perfect
forward
secrecy
perfect
forward
secrecy
means
that
even
if
my
rsa
private
key
is
compromised
at
some
point
in
the
past
recorded
sessions
would
not
be
able
to
be
perfect
forward
secrecy
this
is
not
true
for
all
implementations
of
ssl
the
way
presented
it
so
if
my
rsa
private
key
was
stolen
the
attacker
could
replay
old
encrypted
decrypt
the
aes
session
and
decrypt
the
whole
perfect
forward
secrecy
the
dh
key
exchange
does
allow
for
perfect
forward
secrecy
when
alice
and
bob
generate
their
secret
values
a
and
these
are
referred
to
as
ephemeral
and
are
discarded
when
the
session
is
perfect
forward
secrecy
combining
with
rsa
it
is
typical
authentication
for
alice
and
bob
to
sign
their
secret
values
with
rsa
private
perfect
forward
secrecy
even
if
an
attacker
saves
the
conversation
dh
encrypted
and
then
steals
the
rsa
private
no
way
for
him
to
recreate
the
ephemeral
keys
and
decrypt
the
