applied
crypto
symmetric
crypto
today
what
is
some
notation
and
terminology
historical
approaches
the
study
of
techniques
for
secure
communication
who
needs
to
communicate
little
probably
civilians
the
government
everybody
where
do
you
use
cereal
box
decoder
rings
recreational
logic
puzzles
https
ssh
bluetooth
tor
hard
question
decoder
rings
really
be
considered
some
terminology
when
we
discuss
or
typically
there
are
two
hypothetical
people
alice
and
bob
alice
and
bob
alice
and
bob
represent
two
entities
on
the
internet
that
want
to
communicate
alice
and
bob
we
use
the
words
encrypt
and
decrypt
to
describe
the
techniques
of
and
data
to
allow
for
secure
more
terminology
data
that
is
not
encrypted
is
called
plaintext
more
terminology
data
that
has
been
encrypted
is
called
ciphertext
plaintext
more
terminology
we
will
use
the
word
bitstring
a
bitstring
is
a
sequence
of
bits
and
a
key
is
a
secret
piece
of
information
that
alice
and
bob
can
use
to
encrypt
decrypt
their
secret
symmetric
crypto
when
we
discuss
symmetric
we
refer
to
cryptographic
techniques
that
require
alice
and
bob
to
have
a
k
k
symmetric
crypto
in
crypto
is
strictly
devoted
to
symmetric
we
will
see
how
to
share
keys
in
crypto
k
k
historical
crypto
the
tyrant
histiaeus
shaved
the
head
of
a
trusted
tattooed
his
and
waited
for
his
hair
to
grow
back
to
cover
the
secret
message
against
the
this
is
more
like
steganography
practice
of
hiding
a
message
in
plain
the
caesar
cipher
julius
caesar
used
what
is
now
known
as
the
caesar
cipher
in
his
private
the
caesar
cipher
abcdefghijklmnopqrstuvwxyz
defghijklmnopqrstuvwxyzabc
to
encrypt
the
letter
replace
it
with
the
letter
the
caesar
cipher
the
word
becomes
the
phrase
becomes
the
caesar
cipher
this
is
also
known
as
a
rotation
when
the
rotation
amount
is
the
cipher
is
known
as
the
caesar
security
the
caesar
cipher
provides
basically
no
communication
first
of
you
security
should
assume
that
the
adversary
knows
which
encryption
algorithm
assume
otherwise
would
be
considered
security
by
a
cardinal
the
caesar
security
if
the
adversary
knows
using
a
caesar
there
are
only
possible
rotations
to
guess
not
in
this
the
key
is
the
rotation
substitution
ciphers
so
rotation
ciphers
are
off
the
maybe
we
can
improve
on
them
substitution
ciphers
example
shuffle
the
abcdefghijklmnopqrstuvwxyz
rgehzypkncftqbvwijusloadxm
becomes
substitution
ciphers
in
the
case
of
a
substitution
what
would
you
consider
the
the
key
is
a
secret
piece
of
information
that
both
parties
need
to
substitution
ciphers
in
a
substitution
the
key
is
the
whole
alphabet
abcdefghijklmnopqrstuvwxyz
rgehzypkncftqbvwijusloadxm
security
how
many
substitution
cipher
keys
are
security
a
bit
north
of
security
so
that
seems
like
a
it
was
a
weakness
of
caesar
ciphers
that
there
were
only
possible
rotations
to
but
now
more
than
is
that
security
we
will
go
into
more
detail
next
but
in
we
can
more
or
less
safely
assume
that
there
is
not
enough
processing
power
or
time
on
the
planet
for
computers
to
guess
more
than
remember
come
back
to
security
just
because
there
are
a
lot
of
possible
substitution
ciphers
mean
we
have
secure
security
an
example
of
what
i
the
following
was
encrypted
with
a
substitution
gvvffzzwzj
security
can
you
come
up
with
an
english
word
that
follows
this
double
letter
gvvffzzwzj
security
bookkeeper
security
that
was
kind
of
a
hokey
more
an
adversary
could
use
frequency
analysis
to
find
patterns
in
the
in
for
the
most
common
letter
is
if
the
most
common
letter
in
a
substitution
ciphertext
is
why
is
that
security
because
of
obvious
substitution
ciphers
should
not
be
considered
a
secure
form
of
vigenere
ciphers
perhaps
we
can
apply
a
quick
fix
to
substitution
the
problem
is
that
the
letter
always
gets
encrypted
as
this
is
called
a
monoalphabetic
maybe
we
can
make
it
so
that
could
get
encrypted
as
several
different
vigenere
ciphers
with
a
vigenere
we
take
a
like
the
word
using
the
mapping
and
so
convert
drag
to
a
number
drag
vigenere
ciphers
drag
to
encrypt
the
phrase
use
the
key
to
rotate
a
different
amount
from
letter
to
vigenere
ciphers
attackatdawn
dktgfbazgrwt
vigenere
security
this
is
an
example
of
a
polyalphabetic
vigenere
ciphers
are
hardly
any
better
than
substitution
vigenere
security
given
a
large
ciphertext
encrypted
with
a
vigenere
there
are
two
situations
to
consider
the
attacker
knows
the
length
of
the
key
the
attacker
does
not
know
the
length
of
the
key
vigenere
security
if
the
attacker
knows
the
key
the
attack
goes
like
pick
out
all
the
characters
in
the
ciphertext
that
were
encrypted
with
the
first
number
in
the
key
those
characters
were
all
rotated
exactly
the
same
amount
perform
a
frequency
analysis
vigenere
security
repeat
the
attack
for
each
number
in
the
key
vigenere
security
if
the
attacker
does
not
know
the
key
then
just
guess
the
previous
until
the
ciphertext
is
this
only
works
if
the
key
is
significantly
shorter
than
the
if
the
key
and
the
plaintext
are
the
same
this
is
called
the
more
on
that
next
applied
crypto
symmetric
crypto
review
secure
communication
ciphertext
bitstrings
alice
and
bob
caesar
cipher
substitution
ciphers
vigenere
ciphers
today
bit
xor
pad
pseudo
random
number
generators
stream
ciphers
length
of
keys
and
computability
block
ciphers
history
of
des
and
aes
xor
mathematical
operations
you
already
know
we
need
to
talk
about
operations
on
everyone
remembers
xor
and
xor
are
bit
that
they
operate
on
in
and
or
xor
so
you
can
follow
along
with
the
examples
in
and
it
is
typical
to
introduce
bit
operations
with
a
table
like
the
and
and
the
number
the
number
compute
and
sometimes
it
may
to
help
to
imagine
a
venn
diagram
or
here
is
the
table
for
the
or
or
or
the
number
the
number
compute
or
here
is
the
corresponding
venn
diagram
xor
the
exclusive
or
here
is
the
table
for
the
xor
xor
xor
the
number
the
number
compute
xor
here
is
the
corresponding
venn
diagram
xor
xor
is
used
frequently
because
it
is
a
simple
operation
that
a
b
a
b
a
b
b
xor
it
is
common
to
use
this
property
to
a
bitstring
inside
suppose
alice
and
bob
share
the
k
k
k
xor
if
alice
has
a
plaintext
she
can
xor
it
with
k
and
send
the
ciphertext
c
m
k
to
m
m
k
k
k
xor
bob
then
computes
k
to
recover
k
m
k
k
pad
we
basically
just
described
the
k
m
m
m
k
k
k
pad
important
features
of
the
pad
the
key
must
be
as
long
as
the
message
never
reuse
a
key
if
you
adhere
to
these
the
pad
provides
perfect
pad
unrealistic
to
require
the
key
be
as
long
as
the
if
alice
and
bob
share
a
key
that
a
then
they
can
send
data
securely
back
and
but
only
up
to
a
gigabyte
pad
what
if
alice
and
bob
had
an
infinite
not
really
prngs
maybe
alice
and
bob
have
an
infinite
per
but
suppose
they
have
identical
copies
of
a
number
prng
stands
for
number
prngs
if
alice
and
bob
share
the
same
number
they
know
they
will
always
be
generating
the
same
prng
prng
not
an
infinite
not
an
infinite
but
now
they
have
an
indefinite
store
of
bits
to
draw
when
alice
wants
to
send
a
she
uses
the
next
bits
in
the
generator
to
xor
with
her
and
bob
can
be
sure
generated
the
same
so
he
can
prng
prng
decrypt
her
stream
ciphers
we
basically
just
described
how
stream
ciphers
like
a
pad
with
an
infinite
now
security
lies
in
the
strength
of
the
underlying
number
we
will
eventually
discuss
prng
prng
and
its
switching
gears
to
switch
gears
a
little
consider
the
problem
from
last
time
many
substitution
ciphers
are
and
more
using
frequency
how
long
would
it
take
to
crack
a
substitution
switching
gears
to
demonstrate
this
we
will
consider
the
difficulty
broad
of
trying
to
crack
an
n
with
n
there
are
possible
keys
to
guess
and
switching
gears
this
example
was
done
on
a
laptop
with
the
following
cpu
python
on
ubuntu
switching
gears
computing
hashes
takes
we
talked
about
hash
functions
but
a
good
of
measurement
to
start
with
this
is
supposed
to
mimic
how
hard
it
is
to
guess
a
bit
key
computational
complexity
quantity
time
the
table
to
the
right
seconds
only
extrapolates
our
initial
second
of
minutes
note
that
rows
days
and
could
years
potentially
be
given
millennia
millions
of
cores
millennia
millennia
computational
complexity
even
though
is
still
considered
infeasible
by
computational
standards
with
parallel
we
consider
the
bare
minimum
for
cryptographic
security
to
be
that
if
i
use
a
key
shorter
than
i
am
vulnerable
to
an
attacker
simply
guessing
the
key
keys
are
usually
much
longer
than
for
added
convenience
of
the
and
computational
complexity
remember
the
substitution
cipher
there
are
or
around
possible
substitution
just
because
there
are
so
many
substitution
ciphers
it
would
be
infeasible
to
check
all
of
they
are
still
vulnerable
to
frequency
block
ciphers
the
stage
is
set
to
discuss
block
review
what
we
repetition
can
lead
to
frequency
keys
must
be
longer
than
xor
is
often
a
useful
tool
because
it
is
its
own
block
ciphers
block
ciphers
are
the
modern
encryption
a
good
way
to
visualize
block
plaintext
ciphertext
cipher
key
block
ciphers
block
ciphers
operate
on
blocks
of
for
my
block
cipher
could
encrypt
bits
at
a
and
output
the
block
cipher
should
use
the
key
and
it
up
with
the
plaintext
to
produce
block
ciphers
in
this
we
will
not
describe
the
actual
internal
workings
of
modern
block
it
is
it
is
not
useful
to
you
in
your
life
as
a
security
go
look
it
up
in
your
own
a
history
of
block
ciphers
national
bureau
of
standards
now
requests
submissions
for
a
cipher
that
would
meet
rigorous
ibm
submits
candidate
as
lucifer
is
accepted
and
rebranded
as
des
encryption
des
is
publicly
but
it
has
tweaks
by
the
nsa
a
key
shortened
from
bits
to
a
history
of
block
ciphers
des
is
experimental
attacks
on
des
has
been
in
use
for
nearly
twenty
nist
announces
competition
for
replacement
to
des
eff
frontier
breaks
a
des
key
in
a
history
of
block
ciphers
des
is
still
but
implemented
as
triple
des
more
on
this
in
a
aes
is
announced
as
replacement
encryption
originally
submitted
under
the
name
aes
can
function
with
key
sizes
of
or
aes
is
still
no
feasible
attacks
triple
des
before
aes
replaced
we
had
a
lot
of
chips
that
had
des
to
increase
the
we
used
this
des
capability
to
implement
cipher
plain
des
des
des
text
text
k
k
k
why
not
why
not
we
pointed
out
that
des
functions
with
a
key
bits
of
if
suspicious
about
it
was
considered
ok
in
the
cryptographers
like
it
back
then
does
have
bits
of
meet
in
the
middle
actually
falls
to
called
the
a
suppose
i
use
to
encrypt
some
and
an
attacker
gets
his
hands
on
plaintext
and
the
corresponding
meet
in
the
middle
attacker
should
encrypt
the
plaintext
with
every
possible
key
decrypt
the
ciphertext
with
every
possible
key
ciphertext
plaintext
meet
in
the
middle
match
two
intermediate
ciphertexts
the
key
on
the
left
and
the
key
on
the
right
must
make
up
the
original
bit
ciphertext
plaintext
meet
in
the
middle
some
things
to
note
this
attack
requires
guessing
two
that
takes
or
this
attack
requires
the
storage
of
keys
and
intermediate
ciphertexts
actually
a
lot
of
this
is
known
as
a
is
considered
not
final
word
des
has
a
key
has
but
is
only
considered
to
have
bits
of
security
has
but
is
only
considered
to
have
bits
of
security
aes
functions
with
key
lengths
of
or
applied
crypto
symmetric
crypto
review
secure
communication
alice
and
bob
ciphertext
bitstrings
and
bit
operations
stream
ciphers
block
ciphers
aes
today
modes
of
operation
block
ciphers
remember
block
block
plaintext
ciphertext
cipher
key
block
ciphers
what
do
you
do
if
your
plaintext
is
bigger
than
the
block
for
aes
key
the
block
size
is
bits
block
ciphers
we
need
a
way
to
extend
a
block
cipher
into
something
usable
for
messages
longer
than
the
block
naive
approach
how
about
just
send
each
block
of
plaintext
through
the
block
p
p
p
aes
aes
aes
k
k
k
c
c
c
electronic
codebook
this
is
called
electronic
codebook
or
ecb
p
p
p
aes
aes
aes
k
k
k
c
c
c
electronic
codebook
it
is
also
no
p
p
p
aes
aes
aes
k
k
k
c
c
c
ecb
security
because
the
same
plaintext
will
always
encrypt
to
the
same
this
will
cause
unwanted
repetition
or
patterns
in
the
the
penguin
problem
here
is
an
the
original
image
has
been
encrypted
with
ecb
mode
we
would
prefer
ciphertext
to
resemble
static
the
penguin
problem
we
often
call
this
the
penguin
ecb
mode
is
approach
maybe
we
can
change
each
plaintext
block
before
it
gets
p
p
p
the
symbol
is
standard
for
xor
aes
aes
aes
k
k
k
c
c
c
approach
this
scrambles
the
plaintext
before
going
through
p
p
p
aes
aes
aes
k
k
k
c
c
c
approach
even
if
p
and
p
are
the
c
and
c
will
be
p
p
p
aes
aes
aes
k
k
k
c
c
c
approach
but
the
first
block
never
gets
that
means
if
i
send
many
messages
that
start
with
the
same
first
there
may
be
some
patterns
the
attacker
could
use
against
cipher
block
chaining
no
xor
it
with
an
initialization
p
p
p
iv
aes
aes
aes
k
k
k
c
c
c
cipher
block
chaining
this
is
called
cipher
block
chaining
or
cbc
mode
we
xor
the
first
block
of
plaintext
with
a
randomly
chosen
iv
of
the
same
length
for
the
iv
must
be
important
not
to
reuse
cipher
block
chaining
see
how
decryption
c
c
c
aes
aes
aes
k
k
k
iv
p
p
p
counter
mode
this
last
mode
should
remind
you
of
stream
aes
aes
aes
k
k
k
p
p
p
c
c
c
counter
mode
encrypting
a
counter
provides
random
bits
to
xor
with
the
plaintext
aes
aes
aes
k
k
k
p
p
p
c
c
c
galois
counter
mode
we
should
probably
also
point
out
one
more
common
mode
of
galois
counter
mode
this
is
a
variant
on
counter
mode
that
incorporates
authentication
on
authentication
next
applied
crypto
symmetric
crypto
review
block
ciphers
des
and
aes
modes
of
operation
today
hash
functions
halfway
through
we
are
halfway
through
crypto
we
have
only
discussed
encryption
equally
as
important
is
authentication
that
fine
to
send
encrypted
but
how
do
i
know
the
messages
i
receive
are
the
problem
here
is
how
should
normally
the
problem
but
suppose
something
happens
to
the
ciphertext
in
the
problem
bob
has
no
idea
if
the
message
he
received
was
what
alice
authentication
we
are
going
to
build
our
way
up
to
modern
authentication
we
are
going
to
talk
about
hash
hash
terminology
input
file
output
hash
output
input
function
hash
functions
hash
functions
take
any
size
data
and
output
a
fingerprint
of
that
the
fingerprint
is
always
the
same
hash
output
input
function
hash
functions
hash
functions
can
be
used
for
a
simple
file
integrity
downloaded
hash
checksum
file
function
hash
functions
but
if
i
just
give
you
the
checksum
for
that
you
send
it
backward
through
the
hash
function
to
get
the
original
hash
functions
are
hash
checksum
function
hash
functions
for
is
a
hash
function
that
outputs
a
bit
hash
functions
some
other
common
hash
functions
red
means
the
hash
function
is
not
considered
cryptographically
secure
on
that
hash
functions
since
the
size
of
the
input
space
is
so
much
larger
than
the
size
of
the
output
there
must
be
inputs
outputs
a
collision
is
when
two
inputs
give
the
same
hash
functions
this
completely
break
the
idea
of
fingerprints
if
not
inputs
outputs
hash
functions
actually
very
hard
to
find
hash
functions
those
hash
functions
earlier
that
we
said
are
not
cryptographically
because
there
exist
some
other
common
hash
functions
demonstrated
collisions
how
hard
is
so
how
hard
is
it
to
find
a
there
are
two
ways
to
think
about
i
give
you
a
and
i
ask
you
to
find
a
message
that
corresponds
to
that
hash
i
just
ask
you
to
give
me
two
messages
that
have
the
same
hash
those
seem
the
in
the
first
like
i
asked
you
to
go
find
somebody
with
the
same
birthday
as
this
could
conceivably
involve
you
interviewing
as
many
as
people
before
you
find
those
seem
the
in
the
second
like
i
asked
you
to
just
find
any
two
people
with
the
same
it
turns
that
in
a
room
of
there
is
a
chance
that
at
least
two
people
in
the
room
share
a
a
lot
less
than
the
other
collisions
the
first
problem
is
called
a
good
hash
functions
should
be
resistant
the
second
problem
is
called
a
collision
good
hash
functions
should
be
collision
collisions
for
a
hash
function
with
a
hash
finding
a
requires
attempts
finding
a
collision
only
needs
about
the
square
root
of
or
collisions
this
is
why
has
a
digest
an
attacker
would
need
guesses
to
find
a
collision
our
clever
attacks
on
reduced
this
to
hash
applications
where
else
would
you
use
a
hash
hash
applications
if
you
were
a
website
would
you
store
your
passwords
in
hash
applications
if
not
in
then
would
you
encrypt
with
hash
applications
the
problem
with
encrypting
passwords
is
that
the
aes
key
must
be
stored
if
the
key
is
then
the
passwords
could
be
hash
applications
hash
your
user
server
alice
bob
charlie
dave
hash
applications
how
it
works
when
alice
logs
user
alice
server
alice
alice
bob
charlie
hash
dave
hash
applications
if
alice
enters
the
wrong
user
alice
server
alice
alice
bob
charlie
hash
dave
rainbow
tables
and
salt
the
way
we
have
described
the
process
right
the
database
is
still
vulnerable
to
an
attacker
using
a
rainbow
rainbow
tables
and
salt
the
typical
defense
against
rainbow
tables
is
to
salt
passwords
before
they
are
a
salt
is
randomly
user
salt
generated
data
unique
alice
to
each
bob
the
salt
is
appended
to
charlie
the
password
before
it
dave
is
but
the
salts
must
also
be
stored
for
when
the
user
logs
in
rainbow
tables
and
salt
suppose
an
attacker
steals
the
database
and
gets
access
to
all
of
the
password
the
best
attack
now
is
user
salt
a
dictionary
alice
that
simply
bob
guessing
passwords
and
charlie
seeing
if
the
hashes
dave
are
in
the
applied
crypto
symmetric
crypto
review
block
ciphers
des
and
aes
modes
of
operation
hash
functions
today
authentication
review
here
is
how
should
normally
review
but
something
could
happen
to
the
ciphertext
in
authentication
the
question
we
want
to
answer
today
how
does
bob
know
the
message
he
decrypts
is
really
the
message
alice
what
we
would
like
is
a
method
for
bob
to
say
one
of
this
is
from
or
this
is
not
from
authentication
put
aside
encryption
for
a
while
and
only
focus
on
first
idea
why
not
simply
attach
a
checksum
first
idea
suppose
an
attacker
changes
the
the
evil
message
match
the
hash
first
idea
the
attacker
should
just
change
the
hash
first
a
bust
can
we
do
we
can
assume
alice
and
bob
have
a
shared
second
idea
if
alice
and
bob
both
have
k
secret
use
that
along
with
the
k
k
second
idea
suppose
the
attacker
tries
to
change
the
message
this
bob
can
see
the
hash
match
k
k
second
idea
can
the
attacker
change
the
since
the
attacker
have
he
compute
a
valid
k
k
macs
this
is
an
example
a
message
authentication
code
or
a
message
integrity
code
k
hmacs
macs
do
not
need
to
be
based
on
hash
in
the
previous
we
built
a
message
authentication
code
using
a
hash
but
there
are
other
ways
to
do
it
we
will
hmac
stands
for
message
authentication
hmacs
in
there
are
a
few
options
for
how
to
blend
the
key
with
the
message
before
hashing
with
in
some
this
actually
opens
up
a
vulnerability
called
a
attack
on
your
this
is
but
it
has
the
same
resistance
as
the
underlying
hash
hmacs
hmacs
are
typically
implemented
as
this
eliminates
the
possibility
of
a
macs
so
seen
one
example
of
how
to
implement
a
mac
scheme
in
a
mac
should
be
a
piece
of
information
to
attach
to
a
message
that
verifies
that
and
which
cannot
be
forged
by
an
macs
authentication
with
macs
is
an
example
of
a
symmetric
crypto
we
will
see
other
ways
to
provide
authentication
when
we
get
to
public
key
moving
we
will
now
make
a
mac
scheme
using
the
cbc
mode
of
operation
p
p
p
iv
aes
aes
aes
k
k
k
c
c
c
this
we
will
simply
output
the
last
block
as
a
p
p
p
iv
aes
aes
aes
k
k
k
mac
macs
we
have
some
options
for
where
to
include
the
alice
computes
the
mac
on
the
then
encrypts
bob
must
decrypt
before
verifying
the
to
bob
alice
encrypts
the
then
computes
the
mac
on
the
bob
can
verify
the
message
before
to
bob
alice
encrypts
the
then
computes
the
mac
on
the
bob
must
decrypt
before
verifying
the
to
bob
